<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="machineV4" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="address" type="required" numBits="12" relativity="absolute" signed="true" defaultValue="0" id="model.Field5d1b14a">
	</Field>
	<Field name="opcode" type="required" numBits="4" relativity="absolute" signed="true" defaultValue="0" id="model.Field2602c085">
	</Field>
	<Field name="operation" type="required" numBits="16" relativity="absolute" signed="true" defaultValue="0" id="model.Field10985b7d">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="ac" width="16" initialValue="0" readOnly="false" id="model.module.Register21a03d60" />
	<Register name="ar" width="12" initialValue="0" readOnly="false" id="model.module.Registerfd43443" />
	<Register name="dr" width="16" initialValue="0" readOnly="false" id="model.module.Register25c21bc9" />
	<Register name="e" width="1" initialValue="0" readOnly="false" id="model.module.Register54abae8a" />
	<Register name="fgi" width="1" initialValue="0" readOnly="false" id="model.module.Register7440c242" />
	<Register name="fgo" width="1" initialValue="0" readOnly="false" id="model.module.Register5a9896a5" />
	<Register name="i" width="1" initialValue="0" readOnly="false" id="model.module.Register6f31c26c" />
	<Register name="inpr" width="8" initialValue="0" readOnly="false" id="model.module.Register6667eefe" />
	<Register name="ir" width="16" initialValue="0" readOnly="false" id="model.module.Register144772a2" />
	<Register name="outr" width="8" initialValue="0" readOnly="false" id="model.module.Register6bb762b1" />
	<Register name="pc" width="12" initialValue="0" readOnly="false" id="model.module.Register327e6127" />
	<Register name="s" width="1" initialValue="0" readOnly="false" id="model.module.Register1d03c7a8" />
	<Register name="tr" width="16" initialValue="0" readOnly="false" id="model.module.Register30c35242" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="halt" bit="0" register="model.module.Register1d03c7a8" halt="true" id="model.module.ConditionBit60b11c01" />

	<!--............. rams ..........................-->
	<RAM name="main" length="4096" cellSize="16" id="model.module.RAM21872e69" />

	<!--............. set ...........................-->
	<Set name="ac &lt;- 0" register="model.module.Register21a03d60" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet60f8d02c" />
	<Set name="e &lt;- 0" register="model.module.Register54abae8a" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet78945e3c" />

	<!--............. test ..........................-->
	<Test name="if (ac (15) = 0)" register="model.module.Register21a03d60" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Teste43c36b" />
	<Test name="if (ac (15) = 1)" register="model.module.Register21a03d60" start="0" numBits="1" comparison="EQ" value="1" omission="1" id="model.microinstruction.Testa27ae0e" />
	<Test name="if (ac = 0)" register="model.module.Register21a03d60" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test2c7876d6" />
	<Test name="if (e = 0)" register="model.module.Register54abae8a" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test76c7b8db" />

	<!--............. increment .....................-->
	<Increment name="ac &lt;- ac + 1" register="model.module.Register21a03d60" overflowBit="model.module.ConditionBit60b11c01" delta="1" id="model.microinstruction.Increment668f75f3" />
	<Increment name="pc &lt;- pc + 1" register="model.module.Register327e6127" overflowBit="model.module.ConditionBit60b11c01" delta="1" id="model.microinstruction.Increment516ff0f2" />

	<!--............. shift .........................-->
	<Shift name="ac &lt;- shl ac" type="cyclic" source="model.module.Register21a03d60" destination="model.module.Register21a03d60" direction="left" distance="1" id="model.microinstruction.Shift68b94703" />
	<Shift name="ac &lt;- shr ac" type="cyclic" source="model.module.Register21a03d60" destination="model.module.Register21a03d60" direction="right" distance="1" id="model.microinstruction.Shift46ffd286" />

	<!--............. logical .......................-->
	<Logical name="ac &lt;- ac'" type="NOT" source1="model.module.Register21a03d60" source2="model.module.Register21a03d60" destination="model.module.Register21a03d60" id="model.microinstruction.Logical7cbd813f" />
	<Logical name="e &lt;- e'" type="NOT" source1="model.module.Register54abae8a" source2="model.module.Register54abae8a" destination="model.module.Register54abae8a" id="model.microinstruction.Logical446e07cc" />

	<!--............. arithmetic ....................-->
	<!-- none -->

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="ac (0) &lt;- e" source="model.module.Register54abae8a" srcStartBit="0" dest="model.module.Register21a03d60" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR3fbbc9b5" />
	<TransferRtoR name="ac (15) &lt;- e" source="model.module.Register54abae8a" srcStartBit="0" dest="model.module.Register21a03d60" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR13ac21b6" />
	<TransferRtoR name="ar &lt;- ir (0-11)" source="model.module.Register144772a2" srcStartBit="4" dest="model.module.Registerfd43443" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR388fe85" />
	<TransferRtoR name="ar &lt;- pc" source="model.module.Register327e6127" srcStartBit="0" dest="model.module.Registerfd43443" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR376cc95f" />
	<TransferRtoR name="e &lt;- ac (0)" source="model.module.Register21a03d60" srcStartBit="15" dest="model.module.Register54abae8a" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR567b4866" />
	<TransferRtoR name="e &lt;- ac (15)" source="model.module.Register21a03d60" srcStartBit="0" dest="model.module.Register54abae8a" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR2428728e" />
	<TransferRtoR name="i &lt;- ir (15)" source="model.module.Register144772a2" srcStartBit="0" dest="model.module.Register6f31c26c" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR6010cc58" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="decode ir" ir="model.module.Register144772a2" id="model.microinstruction.Decode31e7c734" />

	<!--............. set condition bit .............-->
	<SetCondBit name="halt &lt;- 1" bit="model.module.ConditionBit60b11c01" value="1" id="model.microinstruction.SetCondBit3d538116" />

	<!--............. io ............................-->
	<!-- none -->

	<!--............. memory access .................-->
	<MemoryAccess name="ir &lt;- m[ar]" direction="read" memory="model.module.RAM21872e69" data="model.module.Register144772a2" address="model.module.Registerfd43443" id="model.microinstruction.MemoryAccess5a082830" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End3c1c5d25" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR376cc95f" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess5a082830" />
		<Microinstruction microRef="model.microinstruction.Increment516ff0f2" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR6010cc58" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR388fe85" />
		<Microinstruction microRef="model.microinstruction.Decode31e7c734" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="iof" opcode="f040" instructionFormat="operation" assemblyFormat="operation" instructionColors="#82ebb5" assemblyColors="#82ebb5" >
	</MachineInstruction>

	<MachineInstruction name="ion" opcode="f080" instructionFormat="operation" assemblyFormat="operation" instructionColors="#b8e3ef" assemblyColors="#b8e3ef" >
	</MachineInstruction>

	<MachineInstruction name="sko" opcode="f100" instructionFormat="operation" assemblyFormat="operation" instructionColors="#d0b8f5" assemblyColors="#d0b8f5" >
	</MachineInstruction>

	<MachineInstruction name="ski" opcode="f200" instructionFormat="operation" assemblyFormat="operation" instructionColors="#cdd080" assemblyColors="#cdd080" >
	</MachineInstruction>

	<MachineInstruction name="out" opcode="f400" instructionFormat="operation" assemblyFormat="operation" instructionColors="#b9c8da" assemblyColors="#b9c8da" >
	</MachineInstruction>

	<MachineInstruction name="inp" opcode="f800" instructionFormat="operation" assemblyFormat="operation" instructionColors="#b5e9ed" assemblyColors="#b5e9ed" >
	</MachineInstruction>

	<MachineInstruction name="hlt" opcode="7001" instructionFormat="operation" assemblyFormat="operation" instructionColors="#f699f3" assemblyColors="#f699f3" >
		<Microinstruction microRef="model.microinstruction.SetCondBit3d538116" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="sze" opcode="7002" instructionFormat="operation" assemblyFormat="operation" instructionColors="#d6bb95" assemblyColors="#d6bb95" >
		<Microinstruction microRef="model.microinstruction.Test76c7b8db" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
		<Microinstruction microRef="model.microinstruction.Increment516ff0f2" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="sza" opcode="7004" instructionFormat="operation" assemblyFormat="operation" instructionColors="#be8e81" assemblyColors="#be8e81" >
		<Microinstruction microRef="model.microinstruction.Test2c7876d6" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
		<Microinstruction microRef="model.microinstruction.Increment516ff0f2" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="sna" opcode="7008" instructionFormat="operation" assemblyFormat="operation" instructionColors="#e9d2f4" assemblyColors="#e9d2f4" >
		<Microinstruction microRef="model.microinstruction.Testa27ae0e" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
		<Microinstruction microRef="model.microinstruction.Increment516ff0f2" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="spa" opcode="7010" instructionFormat="operation" assemblyFormat="operation" instructionColors="#b9b98e" assemblyColors="#b9b98e" >
		<Microinstruction microRef="model.microinstruction.Teste43c36b" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
		<Microinstruction microRef="model.microinstruction.Increment516ff0f2" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="inc" opcode="7020" instructionFormat="operation" assemblyFormat="operation" instructionColors="#d2a093" assemblyColors="#d2a093" >
		<Microinstruction microRef="model.microinstruction.Increment668f75f3" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="cil" opcode="7040" instructionFormat="operation" assemblyFormat="operation" instructionColors="#9ec0f8" assemblyColors="#9ec0f8" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR2428728e" />
		<Microinstruction microRef="model.microinstruction.Shift68b94703" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR3fbbc9b5" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="cir" opcode="7080" instructionFormat="operation" assemblyFormat="operation" instructionColors="#a5bafc" assemblyColors="#a5bafc" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR567b4866" />
		<Microinstruction microRef="model.microinstruction.Shift46ffd286" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR13ac21b6" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="cme" opcode="7100" instructionFormat="operation" assemblyFormat="operation" instructionColors="#c88580" assemblyColors="#c88580" >
		<Microinstruction microRef="model.microinstruction.Logical446e07cc" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="cma" opcode="7200" instructionFormat="operation" assemblyFormat="operation" instructionColors="#94d59e" assemblyColors="#94d59e" >
		<Microinstruction microRef="model.microinstruction.Logical7cbd813f" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="cle" opcode="7400" instructionFormat="operation" assemblyFormat="operation" instructionColors="#c18c87" assemblyColors="#c18c87" >
		<Microinstruction microRef="model.microinstruction.CpusimSet78945e3c" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="cla" opcode="7800" instructionFormat="operation" assemblyFormat="operation" instructionColors="#f48fe4" assemblyColors="#f48fe4" >
		<Microinstruction microRef="model.microinstruction.CpusimSet60f8d02c" />
		<Microinstruction microRef="model.microinstruction.End3c1c5d25" />
	</MachineInstruction>

	<MachineInstruction name="isz_i" opcode="e" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#f1bff0 #e5c4ef" assemblyColors="#f1bff0 #e5c4ef" >
	</MachineInstruction>

	<MachineInstruction name="bsa_i" opcode="d" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#8bcd9f #86cad9" assemblyColors="#8bcd9f #86cad9" >
	</MachineInstruction>

	<MachineInstruction name="bun_i" opcode="c" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#f7a0e5 #93f3f6" assemblyColors="#f7a0e5 #93f3f6" >
	</MachineInstruction>

	<MachineInstruction name="sta_i" opcode="b" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#c7b0f9 #8f8aea" assemblyColors="#c7b0f9 #8f8aea" >
	</MachineInstruction>

	<MachineInstruction name="lda_i" opcode="a" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#aea9b2 #fc8fa1" assemblyColors="#aea9b2 #fc8fa1" >
	</MachineInstruction>

	<MachineInstruction name="add_i" opcode="9" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#99c5da #e5c1d1" assemblyColors="#99c5da #e5c1d1" >
	</MachineInstruction>

	<MachineInstruction name="and_i" opcode="8" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#d496f4 #88eac0" assemblyColors="#d496f4 #88eac0" >
	</MachineInstruction>

	<MachineInstruction name="isz" opcode="6" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#939fc9 #86b4e1" assemblyColors="#939fc9 #86b4e1" >
	</MachineInstruction>

	<MachineInstruction name="bsa" opcode="5" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#a4aedc #96faf4" assemblyColors="#a4aedc #96faf4" >
	</MachineInstruction>

	<MachineInstruction name="bun" opcode="4" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#88f0b1 #d186f5" assemblyColors="#88f0b1 #d186f5" >
	</MachineInstruction>

	<MachineInstruction name="sta" opcode="3" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#8b8d96 #c2c386" assemblyColors="#8b8d96 #c2c386" >
	</MachineInstruction>

	<MachineInstruction name="lda" opcode="2" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#88d8b6 #8ae38c" assemblyColors="#88d8b6 #8ae38c" >
	</MachineInstruction>

	<MachineInstruction name="add" opcode="1" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#e0eccf #a9e3c6" assemblyColors="#e0eccf #a9e3c6" >
	</MachineInstruction>

	<MachineInstruction name="and" opcode="0" instructionFormat="opcode address" assemblyFormat="opcode address" instructionColors="#9e8be6 #dfa19b" assemblyColors="#9e8be6 #dfa19b" >
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM21872e69" startingAddress="33" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="false" />

	<!--............. program counter info ..................-->
	<ProgramCounterInfo programCounter="model.module.Register327e6127" />

</Machine>
